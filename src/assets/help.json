{
    "mov": {
        "description": "Moves a named point to a specific latitude, longitude, and altitude.",
        "arguments": [
            {
                "name": "point_name",
                "type": "string",
                "description": "The name of the point to move."
            },
            {
                "name": "pos",
                "type": "array",
                "description": "Position."
            },
            {
                "name": "use_geo",
                "type": "bool",
                "description": "Use geographical or cartesian coordinates."
            }
        ]
    },
    "rot": {
        "description": "Rotates a point to match the orientation implied by the quaternion.",
        "arguments": [
            {
                "name": "point_name",
                "type": "string",
                "description": "The name of the point to rotate."
            },
            {
                "name": "q",
                "type": "array",
                "description": "A quaternion `[x, y, z, w]` for the rotation."
            }
        ]
    },
    "add_point": {
        "description": "Adds a new point to the scene.",
        "arguments": [
            {
                "name": "name",
                "type": "string",
                "description": "Name of the point."
            },
            {
                "name": "coordinates",
                "type": "array",
                "description": "Cartesian coordinates `[x, y, z]`."
            },
            {
                "name": "quaternion",
                "type": "array (optional)",
                "description": "Initial rotation as a quaternion `[x, y, z, w]`."
            }
        ]
    },
    "list_points": {
        "description": "Lists all points currently in the state.",
        "arguments": []
    },
    "create_line": {
        "description": "Creates a line between two points or coordinates.",
        "arguments": [
            {
                "name": "name",
                "type": "string",
                "description": "Name of the line."
            },
            {
                "name": "startArg",
                "type": "array or string",
                "description": "Starting point or coordinates."
            },
            {
                "name": "endArg",
                "type": "array or string",
                "description": "Ending point or coordinates."
            }
        ]
    },
    "angle": {
        "description": "Calculates the angle between two vectors.",
        "arguments": [
            {
                "name": "vec1Arg",
                "type": "string/array",
                "description": "A vector or 'point1->point2' string."
            },
            {
                "name": "vec2Arg",
                "type": "string/array",
                "description": "A vector or 'point1->point2' string."
            }
        ]
    },
    "rad2deg": {
        "description": "Converts radians to degrees.",
        "arguments": [
            {
                "name": "x",
                "type": "number",
                "description": "Angle in radians."
            }
        ]
    },
    "deg2rad": {
        "description": "Converts degrees to radians.",
        "arguments": [
            {
                "name": "x",
                "type": "number",
                "description": "Angle in degrees."
            }
        ]
    },
    "findBestQuaternion": {
        "description": "A wrapper around the `find_best_quaternion_for_desired_attitude` function that simplifies the process of aligning body vectors to target vectors by supporting flexible inputs.",
        "arguments": [
            {
                "name": "primaryVecArg",
                "type": "array | string",
                "description": "The primary body vector. Can be a 3-element array (e.g., [1, 0, 0]) or one of `x`, `y`, or `z`."
            },
            {
                "name": "secondaryVecArg",
                "type": "array | string",
                "description": "The secondary body vector. Can be a 3-element array (e.g., [0, 1, 0]) or one of `x`, `y`, or `z`."
            },
            {
                "name": "primaryTargetArg",
                "type": "array | string",
                "description": "The target vector for the primary body vector. Can be a 3-element array, a line name, or a string in the form `startPoint->endPoint`."
            },
            {
                "name": "secondaryTargetArg",
                "type": "array | string",
                "description": "The target vector for the secondary body vector. Can be a 3-element array, a line name, or a string in the form `startPoint->endPoint`."
            }
        ]
    },
    "find_best_quaternion_for_desired_attitude" : {
      "description": "Returns the 3js quaternion that aligns the primary body vector to a given target direction and minimizes the angle to the target given for the secondary body vector.",
      "arguments": [
       {
          "name": "primary_body_vector",
          "type": "array",
          "description": "A vector as defined on the body frame that we will point. Its target is always perfectly achieved.",
        },
        {
          "name": "secondary_body_vector",
          "type": "array",
          "description":"A vector as defined on the body frame that we will make a best effort to align to `secondary_body_vector_target`.",
        },
        {
          "name": "primary_body_vector_target",
          "type": "array",
          "description": "The target direction for the `primary_body_vector`.",
        },
        {
          "name": "secondary_body_vector_target",
          "type": "array",
          "description": "The target direction for the `secondary_body_vector`.",
        }
      ]
    },
    "frame": {
        "description": "Returns the local frame vectors of a point.",
        "arguments": [
            {
                "name": "point",
                "type": "string",
                "description": "The name of the point."
            }
        ]
    },
    "fetchTLE": {
        "description": "Fetches the Two-Line Element (TLE) for a satellite using its COSPAR ID.",
        "arguments": [
            {
                "name": "norad_id",
                "type": "string",
                "description": "COSPAR ID of the satellite."
            }
        ]
    },
    "mov2sat": {
        "description": "Moves a point to the position of a satellite at a given timestamp.",
        "arguments": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the point to move."
            },
            {
                "name": "cosparId",
                "type": "string",
                "description": "COSPAR ID of the satellite."
            },
            {
                "name": "timestamp",
                "type": "Date",
                "description": "The time for which the position is computed."
            }
        ]
    },
    "sph2xyz": {
        "description": "Converts spherical coordinates to Cartesian coordinates.",
        "arguments": [
            {
                "name": "sph",
                "type": "array",
                "description": "Spherical coordinates `[latitude, longitude, radius]`."
            }
        ]
    },
    "geo2xyz": {
        "description": "Converts geographic coordinates to Cartesian coordinates.",
        "arguments": [
            {
                "name": "geo",
                "type": "array",
                "description": "Geographic coordinates `[latitude, longitude, altitude]`."
            }
        ]
    },
    "xyz2sph": {
        "description": "Converts Cartesian coordinates to spherical coordinates.",
        "arguments": [
            {
                "name": "xyz",
                "type": "array",
                "description": "Cartesian coordinates `[x, y, z]`."
            }
        ]
    },
    "xyz2geo": {
        "description": "Converts Cartesian coordinates to geographic coordinates (latitude, longitude, and altitude).",
        "arguments": [
            {
                "name": "xyz",
                "type": "array",
                "description": "Cartesian coordinates `[x, y, z]`."
            }
        ]
    }
}
