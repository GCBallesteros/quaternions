export function createRangeInput(
  label: string,
  id: string,
  min: string,
  max: string,
  step: string,
  value: string,
  onChange: (value: number) => void
): HTMLDivElement {
  const container = document.createElement('div');
  container.className = 'range-control';

  const labelElement = document.createElement('label');
  labelElement.htmlFor = id;
  labelElement.textContent = label;
  container.appendChild(labelElement);

  const input = document.createElement('input');
  input.type = 'range';
  input.id = id;
  input.min = min;
  input.max = max;
  input.step = step;
  input.value = value;
  
  input.addEventListener('input', () => {
    onChange(parseFloat(input.value));
  });
  
  container.appendChild(input);
  
  return container;
}

export class Satellite extends OrientedPoint {
  private tle: string | null = null;
  private noradId: string;
  private state: State;

  constructor(
    geometry: THREE.Group,
    noradId: string,
    state: State,
    camera_orientation?: [number, number, number, number],
  ) {
    super(geometry, camera_orientation);
    this.noradId = noradId;
    this.state = state;
  }

  async updatePosition(timestamp: Date): Promise<void> {
    // First, ensure we have TLE data
    if (!this.tle) {
      // Check cache first
      if (this.state.tles[this.noradId]) {
        this.tle = this.state.tles[this.noradId];
      } else {
        // Fetch and cache TLE
        try {
          const url = `https://celestrak.org/NORAD/elements/gp.php?CATNR=${encodeURIComponent(this.noradId)}&FORMAT=3LE`;
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error(`Failed to fetch TLE: ${response.status}`);
          }
          this.tle = await response.text();
          // Cache the TLE
          this.state.tles[this.noradId] = this.tle;
        } catch (error) {
          throw new Error(`Error fetching TLE: ${error}`);
        }
      }
    }

    // Parse TLE and calculate position
    const tleLines = this.tle.split('\n');
    const satrec = satellite.twoline2satrec(tleLines[1], tleLines[2]);
    
    if (!satrec) {
      throw new Error('Failed to parse TLE data');
    }

    const positionAndVelocity = satellite.propagate(satrec, timestamp);
    if (!positionAndVelocity.position) {
      throw new Error('Failed to calculate satellite position');
    }

    // Convert ECI to ECEF coordinates
    const gmst = satellite.gstime(timestamp);
    const position = satellite.eciToEcf(positionAndVelocity.position, gmst);
    
    // Update position
    this.position = [position.x, position.y, position.z];
  }

  get noradID(): string {
    return this.noradId;
  }
}
body,
html {
  margin: 0;
  padding: 0;
  height: 100vh;
  font-family: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;
  width: 100vw;
  display: grid;
  grid-template-columns: 2fr 5px 1fr;
  grid-template-rows: 100%;
  overflow: hidden;
}

canvas {
  width: 100%;
  height: 100%;
  display: block;
}
#canvas-container {
  background-color: black;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  position: relative;
  z-index: 0;
}

#right-panel {
  display: flex;
  flex-direction: column;
  border-left: none;
  overflow: visible;
  position: relative;
  z-index: 2;
}

#resizer {
  width: 5px;
  cursor: col-resize;
  background-color: #333;
  z-index: 1;
  position: relative;
}

#editor-container {
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

#settings-container {
  padding: 20px;
  color: white;
  background: #1e1e1e;
}

#monaco-editor {
  flex: 1;
  overflow: hidden;
}

#output {
  flex-basis: 20%;
  overflow-y: auto;
  background-color: #1e1e1e;
  color: white;
  padding: 10px;
  border-top: 2px solid #333;
  font-size: 14px;
  white-space: pre-wrap;
}
/* Tabs */
.tabs {
  display: flex;
  flex-direction: column;
  position: absolute;
  left: -27px;
  top: 1px;
  z-index: 2;
}

.tab-button {
  writing-mode: vertical-rl;
  transform: rotate(180deg);
  padding: 5px 5px;
  background: #333;
  border: none;
  color: #fff;
  cursor: pointer;
  margin-bottom: 1px;
  border-radius: 1px;
  text-align: center;
  min-height: 80px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.tab-button.active {
  background: #007bff;
}

.tab-content {
  display: none;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
  position: absolute;
  inset: 0;
}

.tab-content.active {
  display: flex;
  position: relative;
}

/* Settings Groups */
.settings-group {
  margin-bottom: 20px;
}

.settings-group h3 {
  margin-top: 0;
  color: #007bff;
}

/* Time Input */
.time-input {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 10px;
}

.time-inputs {
  display: flex;
  align-items: center;
  gap: 5px;
}

.time-input input[type="number"] {
  width: 50px;
  padding: 5px;
  background: #333;
  border: 1px solid #555;
  color: white;
  border-radius: 3px;
}

.time-input input[type="date"] {
  padding: 5px;
  background: #333;
  border: 1px solid #555;
  color: white;
  border-radius: 3px;
}

#update-time {
  padding: 8px;
  background: #007bff;
  border: none;
  color: white;
  border-radius: 3px;
  cursor: pointer;
}

#update-time:hover {
  background: #0056b3;
}

/* Switch/Toggle */
.switch {
  position: relative;
  display: inline-flex;
  align-items: center;
  cursor: pointer;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: relative;
  width: 60px;
  height: 30px;
  background-color: #333;
  border-radius: 15px;
  transition: 0.4s;
}

.slider:before {
  position: absolute;
  content: '';
  height: 22px;
  width: 22px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  border-radius: 50%;
  transition: 0.4s;
}

input:checked + .slider {
  background-color: #007bff;
}

input:checked + .slider:before {
  transform: translateX(30px);
}

.switch-label {
  margin-left: 10px;
  color: #fff;
}

/* Range Control */
.range-control {
  margin-top: 15px;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.range-control label {
  color: #fff;
}

.range-control input[type="range"] {
  width: 100%;
  height: 4px;
  background: #333;
  border-radius: 2px;
  -webkit-appearance: none;
}

.range-control input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 16px;
  height: 16px;
  background: #007bff;
  border-radius: 50%;
  cursor: pointer;
}

.range-control input[type="range"]::-moz-range-thumb {
  width: 16px;
  height: 16px;
  background: #007bff;
  border-radius: 50%;
  cursor: pointer;
  border: none;
}

/* Top Links */
#top-links {
  position: absolute;
  top: 10px;
  left: 20px;
  z-index: 1000;
  display: flex;
  gap: 20px;
}

#top-links a {
  color: white;
  text-decoration: none;
  font-family: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;
  font-size: 14px;
  padding: 4px 8px;
  background-color: rgba(0, 0, 0, 0.5);
  border-radius: 4px;
  transition: background-color 0.2s;
}

/* Execute Button */
#execute {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px;
  cursor: pointer;
  font-size: 16px;
}

#execute:hover {
  background-color: #0056b3;
}
